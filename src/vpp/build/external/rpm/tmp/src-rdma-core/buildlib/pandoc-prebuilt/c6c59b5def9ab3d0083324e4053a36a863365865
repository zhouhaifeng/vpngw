.\" Automatically generated by Pandoc 2.5
.\"
.TH "ibv_import_pd, ibv_unimport_pd" "3" "2020\-5\-3" "libibverbs" "Libibverbs Programmer\[cq]s Manual"
.hy
.SH NAME
.PP
ibv_import_pd \- import a PD from a given ibv_context
.PP
ibv_unimport_pd \- unimport a PD
.SH SYNOPSIS
.IP
.nf
\f[C]
#include <infiniband/verbs.h>

struct ibv_pd *ibv_import_pd(struct ibv_context *context, uint32_t pd_handle);
void ibv_unimport_pd(struct ibv_pd *pd)
\f[R]
.fi
.SH DESCRIPTION
.PP
\f[B]ibv_import_pd()\f[R] returns a protection domain (PD) that is
associated with the given \f[I]pd_handle\f[R] in the given
\f[I]context\f[R].
.PP
The input \f[I]pd_handle\f[R] value must be a valid kernel handle for a
PD object in the given \f[I]context\f[R].
It can be achieved from the original PD by getting its ibv_pd\->handle
member value.
.PP
The returned \f[I]ibv_pd\f[R] can be used in all verbs that get a
protection domain.
.PP
\f[B]ibv_unimport_pd()\f[R] unimport the PD.
Once the PD usage has been ended ibv_dealloc_pd() or ibv_unimport_pd()
should be called.
The first one will go to the kernel to destroy the object once the
second one way cleanup what ever is needed/opposite of the import
without calling the kernel.
.PP
This is the responsibility of the application to coordinate between all
ibv_context(s) that use this PD.
Once destroy is done no other process can touch the object except for
unimport.
All users of the context must collaborate to ensure this.
.SH RETURN VALUE
.PP
\f[B]ibv_import_pd()\f[R] returns a pointer to the allocated PD, or NULL
if the request fails.
.SH SEE ALSO
.PP
\f[B]ibv_alloc_pd\f[R](3), \f[B]ibv_dealloc_pd\f[R](3),
.SH AUTHOR
.PP
Yishai Hadas <yishaih@mellanox.com>
