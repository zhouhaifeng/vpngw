.\" Automatically generated by Pandoc 2.5
.\"
.TH "ibv_import_dm ibv_unimport_dm" "3" "2021\-1\-17" "libibverbs" "Libibverbs Programmer\[cq]s Manual"
.hy
.SH NAME
.PP
ibv_import_dm \- import an DM from a given ibv_context
.PP
ibv_unimport_dm \- unimport an DM
.SH SYNOPSIS
.IP
.nf
\f[C]
#include <infiniband/verbs.h>

struct ibv_dm *ibv_import_dm(struct ibv_context *context, uint32_t dm_handle);
void ibv_unimport_dm(struct ibv_dm *dm)
\f[R]
.fi
.SH DESCRIPTION
.PP
\f[B]ibv_import_dm()\f[R] returns a Device memory (DM) that is
associated with the given \f[I]dm_handle\f[R] in the RDMA context.
.PP
The input \f[I]dm_handle\f[R] value must be a valid kernel handle for an
DM object in the assosicated RDMA context.
It can be achieved from the original DM by getting its ibv_dm\->handle
member value.
.PP
\f[B]ibv_unimport_dm()\f[R] un import the DM.
Once the DM usage has been ended ibv_free_dm() or ibv_unimport_dm()
should be called.
The first one will go to the kernel to destroy the object once the
second one way cleanup what ever is needed/opposite of the import
without calling the kernel.
.PP
This is the responsibility of the application to coordinate between all
ibv_context(s) that use this DM.
Once destroy is done no other process can touch the object except for
unimport.
All users of the context must collaborate to ensure this.
.SH RETURN VALUE
.PP
\f[B]ibv_import_dm()\f[R] returns a pointer to the allocated DM, or NULL
if the request fails and errno is set.
.SH NOTES
.SH SEE ALSO
.PP
\f[B]ibv_alloc_dm\f[R](3), \f[B]ibv_free_dm\f[R](3),
.SH AUTHOR
.PP
Maor Gottlieb <maorg@nvidia.com>
